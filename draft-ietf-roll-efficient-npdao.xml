<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
     which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
     There has to be one entity for each item to be referenced.
     An alternate method (rfc include) is described in the references. -->

<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC6550 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6550.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs),
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="yes" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="std" docName="draft-ietf-roll-efficient-npdao-09" ipr="trust200902">
  <!-- category values: std, bcp, info, exp, and historic
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN"
     they will automatically be output with "(if approved)" -->

  <!-- ***** FRONT MATTER ***** -->

  <front>
    <!-- The abbreviated title is used in the page header - it is only necessary if the
         full title is longer than 39 characters -->

    <title abbrev="Efficient Route Invalidation">Efficient Route Invalidation</title>

    <author fullname="Rahul Arvind Jadhav" initials="R.A." role="editor" surname="Jadhav">
      <organization>Huawei</organization>
      <address>
        <postal>
          <street>Kundalahalli Village, Whitefield,</street>
          <city>Bangalore</city>
          <region>Karnataka</region>
          <code>560037</code>
          <country>India</country>
        </postal>
        <phone>+91-080-49160700</phone>
        <email>rahul.ietf@gmail.com</email>
      </address>
    </author>
    <author initials="P" surname="Thubert" fullname="Pascal Thubert">
      <organization abbrev="Cisco">Cisco Systems, Inc</organization>
      <address>
         <postal>
            <street>Building D</street>
            <street>45 Allee des Ormes - BP1200 </street>
            <city>MOUGINS - Sophia Antipolis</city>
            <code>06254</code>
            <country>France</country>
         </postal>
         <phone>+33 497 23 26 34</phone>
         <email>pthubert@cisco.com</email>
      </address>
   </author>
    <author fullname="Rabi Narayan Sahoo" initials="R.N." surname="Sahoo">
      <organization>Huawei</organization>
      <address>
        <postal>
          <street>Kundalahalli Village, Whitefield, </street>
          <city>Bangalore</city>
          <region>Karnataka</region>
          <code>560037</code>
          <country>India</country>
        </postal>
        <phone>+91-080-49160700</phone>
        <email>rabinarayans@huawei.com</email>
      </address>
    </author>
    <author initials="Z" surname="Cao" fullname="Zhen Cao">
      <organization>Huawei</organization>
      <address>
        <postal>
          <street>W Chang'an Ave</street>
          <city>Beijing</city>
          <country>China</country>
        </postal>
        <email>zhencao.ietf@gmail.com</email>
      </address>
    </author>

    <date year="2018" />

    <!-- If the month and year are both specified and are the current ones, xml2rfc will fill
         in the current day for you. If only the current year is specified, xml2rfc will fill
     in the current day and month for you. If the year is not the current one, it is
     necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the
     purpose of calculating the expiry date).  With drafts it is normally sufficient to
     specify just the year. -->

    <!-- Meta-data Declarations -->

    <area>General</area>

    <workgroup>ROLL</workgroup>

    <!-- WG name at the upperleft corner of the doc,
         IETF is fine for individual submissions.
     If this element is not present, the default is "Network Working Group",
         which is used by the RFC Editor as a nod to the history of the IETF. -->

    <keyword>template</keyword>

    <!-- Keywords will be incorporated into HTML output
         files in a meta tag but they have no effect on text or nroff
         output. If you submit your draft to the RFC Editor, the
         keywords will be used for the search engine. -->

    <abstract>
      <t>This document describes the problems associated with NPDAO messaging
      used in RPL for route invalidation and signaling changes to improve route
      invalidation efficiency.</t>
    </abstract>
  </front>

<middle>
    <section title="Introduction">
        <t>
            RPL <xref target="RFC6550"/> (Routing Protocol for Low power and
            lossy networks) specifies a proactive distance-vector based routing
            scheme. RPL has an optional messaging in the form of DAO
            (Destination Advertisement Object) messages using which the 6LBR
            (6Lo Border Router) and 6LR (6Lo Router) can learn route towards
            the downstream nodes. In storing mode, DAO messages would result in
            routing entries been created on all intermediate 6LRs from the
            node's parent all the way towards the 6LBR.
        </t>

        <t>
            RPL allows use of No-Path DAO (NPDAO) messaging to invalidate a
            routing path corresponding to the given target, thus releasing
            resources utilized on that path.  A NPDAO is a DAO message with
            route lifetime of zero, originates at the target node and always
            flows upstream towards the 6LBR. This document explains the
            problems associated with the current use of NPDAO messaging and
            also discusses the requirements for an optimized route invalidation
            messaging scheme. Further a new pro-active route invalidation
            message called as "Destination Cleanup Object (DCO)" is specified
            which fulfills requirements of an optimized route invalidation
            messaging.
        </t>

        <t>
            The document only caters to the RPL's storing mode of operation
            (MOP). The non-storing MOP does not require use of NPDAO for route
            invalidation since routing entries are not maintained on 6LRs.
        </t>


        <section title="Requirements Language and Terminology">
            <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
                NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and
                "OPTIONAL" in this document are to be interpreted as described
                in <xref target="RFC2119">RFC 2119</xref>.</t>

            <t>
                6LR: 6LoWPAN Router. This is an intermediate 6lowpan router
                which allows traffic routing through itself in a multihop 6lo
                network.
            </t>
            <t>
                DAG: Directed Acyclic Graph. A directed graph having the
                property that all edges are oriented in such a way that no
                cycles exist.
            </t>
            <t>
                DODAG: Destination-oriented DAG. A DAG rooted at a single
                destination, i.e., at a single DAG root with no outgoing edges.
            </t>
            <t>
                6LBR: 6LoWPAN Border Router. A border router which is a DODAG
                root and is the edge node for traffic flowing in and out of the
                6lo network.
            </t>
            <t>
                DAO: Destination Advertisement Object. DAO messaging allows
                downstream routes to the nodes to be established.
            </t>
            <t>
                DIO: DODAG Information Object. DIO messaging allows upstream
                routes to the 6LBR to be established. DIO messaging is
                initiated at the DAO root.
            </t>

            <t>
                Common Ancestor node: 6LR/6LBR node which is the first common
                node between two paths of a target node.
            </t>

            <t>
                NPDAO: No-Path DAO. A DAO message which has target with
                lifetime 0.
            </t>

            <t>
                DCO: Destination Cleanup Object, A new RPL control message type
                defined by this draft. DCO messaging improves proactive route
                invalidation in RPL.
            </t>

            <t>
                Regular DAO: A DAO message with non-zero lifetime.
            </t>

            <t>LLN: Low Power and Lossy Networks.</t>

            <t>
                Target Node: The node switching its parent whose routing
                adjacencies are updated (created/removed).
            </t>

            <t>This document also uses terminology described in <xref
                    target="RFC6550"/>.</t>
        </section>

        <section anchor="current_npdao" title="Current NPDAO messaging">
            <t>
                RPL uses NPDAO messaging in the storing mode so that the node
                changing it routing adjacencies can invalidate the previous
                route. This is needed so that nodes along previous path can
                release any resources (such as the routing entry) it maintains
                on behalf of target node.
            </t>

            <t>
                For the rest of this document consider the following topology:
            </t>

            <t> <figure align="center" anchor="sample_top" title="Sample
                    topology"> <artwork align="center"><![CDATA[
    (6LBR)
      |
      |
      |
     (A)
     / \
    /   \
   /     \
 (G)     (H)
  |       |
  |       |
  |       |
 (B)     (C)
   \      ;
    \    ;
     \  ;
      (D)
      / \
     /   \
    /     \
  (E)     (F)
                        ]]></artwork> </figure> </t>

            <t>
                Node (D) is connected via preferred parent (B). (D) has an
                alternate path via (C) towards the 6LBR. Node (A) is the common
                ancestor for (D) for paths through (B)-(G) and (C)-(H). When
                (D) switches from (B) to (C), RPL allows sending NPDAO to (B)
                and regular DAO to (C).
            </t>
        </section>

        <!--
        <section title="Cases when No-Path DAO may be used">
            <t> There are following cases in which a node switches its parent
                and may employ No-Path DAO messaging:</t>

            <t>Case I: Current parent becomes unavailable because of transient
                or permanent link or parent node failure.</t>

            <t>Case II: The node finds a better parent node i.e. the metrics of
                another parent is better than its current parent.</t>

            <t>Case III: The node switches to a new parent whom it "thinks" has
                a better metric but does not in reality.</t>

            <t>The usual steps of operation when the node switches the parent
                is that the node sends a No-Path DAO message via its current parent
                to invalidate its current route and subsequently it tries to
                establish a new routing path by sending a new DAO via its new
                parent.</t>
        </section>
        -->

        <section title="Why NPDAO is important?">
            <t>
                Nodes in LLNs may be resource constrained. There is limited
                memory available and routing entry records are one of the
                primary elements occupying dynamic memory in the nodes. Route
                invalidation helps 6LR nodes to decide which entries could be
                discarded to better achieve resource utilization.  Thus it
                becomes necessary to have efficient route invalidation
                mechanism. Also note that a single parent switch may result in
                a "sub-tree" switching from one parent to another. Thus the
                route invalidation needs to be done on behalf of the sub-tree
                and not the switching node alone. In the above example, when
                Node (D) switches parent, the route updates needs to be done
                for the routing tables entries of (C),(H),(A),(G), and (B) with
                destination (D),(E) and (F). Without efficient route
                invalidation, a 6LR may have to hold a lot of stale route
                entries.
            </t>
        </section>
    </section>

    <section anchor="current_npdao_problems" title="Problems with current
        NPDAO messaging">
        <section title="Lost NPDAO due to link break to the previous parent">
            <t>
                When a node switches its parent, the NPDAO is to be sent to
                its previous parent and a regular DAO to its new parent. In
                cases where the node switches its parent because of transient
                or permanent parent link/node failure then the NPDAO message is
                bound to fail.
            </t>
            <!--
            <t>
                RPL allows use of route lifetime to remove unwanted routes in
                case the routes could not be refreshed. But route lifetimes in
                case of LLNs could be substantially high and thus the route
                entries would be stuck for longer times.
            </t>
            -->
        </section>

        <section title="Invalidate routes of dependent nodes">
            <t>
                RPL does not specify how route invalidation will work for
                dependent nodes rooted at switching node, resulting in stale
                routing entries of the dependent nodes. The only way
                for 6LR to invalidate the route entries for dependent nodes
                would be to use route lifetime expiry which could be
                substantially high for LLNs.
            </t>
            <t>
                In the example topology, when Node (D) switches its parent,
                Node (D) generates an NPDAO on its behalf. There is no NPDAO
                generated by the dependent child nodes (E) and (F), through the
                previous path via (D) to (B) and (G), resulting in stale
                entries on nodes (B) and (G) for nodes (E) and (F).
            </t>
        </section>

        <section title="Possible route downtime caused by async operation of
            NPDAO and DAO">
            <t>
                A switching node may generate both an NPDAO and DAO via two
                different paths at almost the same time. There is a possibility
                that an NPDAO generated may invalidate the previous route and
                the regular DAO sent via the new path gets lost on the way.
                This may result in route downtime impacting downward
                traffic for the switching node.
            </t>
            <t>
                In the example topology, consider Node (D) switches from parent
                (B) to (C). An NPDAO sent via previous route may invalidate
                the previous route whereas there is no way to determine whether
                the new DAO has successfully updated the route entries on the
                new path.
            </t>
        </section>
    </section>

    <section title="Requirements for the NPDAO Optimization">

        <section title="Req#1: Remove messaging dependency on link to the previous
            parent">
            <t>
                When the switching node sends the NPDAO message to the previous
                parent, it is normal that the link to the previous parent is
                prone to failure (thats why the node decided to switch).
                Therefore, it is required that the route invalidation does not
                depend on the previous link which is prone to failure. The
                previous link referred here represents the link between the
                node and its previous parent (from whom the node is now
                disassociating).
            </t>
        </section>

        <section title="Req#2: Dependent nodes route invalidation on parent
            switching">
            <t>
                It should be possible to do route invalidation for dependent
                nodes rooted at the switching node.
            </t>
        </section>

        <section title="Req#3: Route invalidation should not impact data traffic">
            <t>
                While sending the NPDAO and DAO messages, it is possible that
                the NPDAO successfully invalidates the previous path, while the
                newly sent DAO gets lost (new path not set up successfully).
                This will result in downstream unreachability to the node
                switching paths. Therefore, it is desirable that the route
                invalidation is synchronized with the DAO to avoid the risk of
                route downtime.
            </t>
        </section>
    </section>

    <!--	Too Confusing section and may not be needed now... If required this can be added in Appendix.
    <section title="Existing Solution">
        <section title="NPDAO can be generated by the parent node who detects
        link failure to the child">
            <t>RPL states mechanisms which could be utilized to clear DAO
            states in a sub-DODAG. [RFC6550] Section 11.2.2.3 states "With DAO
            inconsistency loop recovery, a packet can be used to recursively
            explore and clean up the obsolete DAO states along a
            sub-DODAG".</t>

            <t>Thus in the sample topology in Figure 1, when Node (B) detects
            link failure to (D), (B) has an option of generating an NPDAO on
            behalf of Node (D) and its sub-childs, (E) and (F).</t>

            <t>This section explains why generation of an NPDAO in such cases
            may not function as desired. Primarily the DAO state information in
            the form of Path Sequence plays a major role here. Every target is
            associated with a Path Sequence number which relates to the latest
            state of the target. <xref target="RFC6550"/> Section 7.1 explains
            the semantics of Path Sequence number. The target node increments
            the Path Sequence number every time it generates a new DAO. The
            router nodes en-route utilize this Path Sequence number to decide
            the freshness of target information. If a non-target node has to
            generate an NPDAO then it could use following two possibilities
            with Path Sequence number: </t>

            <t>Let the Path Sequence number of old regular DAO that flowed
            through (B) be x. The subsequent regular DAO generated by Node (D)
            will have sequence number x+1.</t>

            <t>i. Node (B) uses the previous Path Sequence number from the
            regular DAO i.e. NPDAO(pathseq=x)</t>

            <t>ii. Node (B) increments the Path Sequence number i.e.
            NPDAO(pathseq=x+1)</t>

            <t>In case i, the NPDAO(pathseq=x) will be dropped by all the
            intermediate nodes since the semantics of Path Sequence number
            dictates that any DAO with an older Path Sequence number be
            dropped.</t>

            <t>In case ii, there is a risk that the NPDAO(pathseq=x+1)
            traverses up the DODAG and invalidates all the routes till the root
            and then the regular DAO(pathseq=x+1) from the target traverses
            upwards. In this case the regular DAO(pathseq=x+1) will be dropped
            from common ancestor node to the root. This will result in route
            downtime.</t>

            <t>Another problem with this scheme is its dependence on the
            upstream neighbor to detect that the downstream neighbor is
            unavailable. There are two possibilities by which such a detection
            might be put to work:</t>

            <t>i. There is P2P traffic from the previous sub-DODAG to any of
            nodes in the sub-tree which has switched the path. In the above
            example, lets consider that Node (G) has P2P traffic for either of
            nodes (D), (E), or (F). In this case, Node (B) will detect
            forwarding error while forwarding the packets from Node (B) to (D).
            But dependence on P2P traffic may not be an optimal way to solve
            this problem considering the reactive approach of the scheme. The
            P2P traffic pattern might be sparse and thus such a detection might
            kick-in too late.</t>

            <t>ii. The other case is where Node (B) explicitly employs some
            mechanism to probe directly attached downstream child nodes. Such
            kind of schemes are seldom used.</t>
        </section>

        <section title="NPDAO can be generated once the link is restored to
        the previous parent">
            <t>This scheme solves a specific scenario of transient links. The
            child node can detect that the connection to previous parent is
            restored and then transmit an NPDAO to the previous parent to
            invalidate the route. This scheme is stateful, thus requires more
            memory and solves a specific scenario.</t>
        </section>
    </section>
    -->
    <section title="Proposed changes to RPL signaling">
        <section title="Change in RPL route invalidation semantics">
            <t>
                As described in <xref target="current_npdao"/>, the NPDAO
                originates at the node switching the parent and traverses
                upstream towards the root. In order to solve the problems as
                mentioned in <xref target="current_npdao_problems"/>, the draft
                adds new pro-active route invalidation message called as
                "Destination Cleanup Object" (DCO) that originates at a common
                ancestor node between the new and old path. The common ancestor
                node generates a DCO in response to the change in the next-hop
                on receiving a regular DAO with updated path sequence for the
                target.
            </t>

            <t>
                In <xref target="sample_top"/>, when node D decides to
                switch the path from B to C, it sends a regular DAO to node C
                with reachability information containing target as address of D
                and a incremented path sequence number. Node C will update the
                routing table based on the reachability information in DAO and
                in turn generate another DAO with the same reachability
                information and forward it to H. Node H also follows the same
                procedure as Node C and forwards it to node A. When node A
                receives the regular DAO, it finds that it already has a
                routing table entry on behalf of the target address of node D.
                It finds however that the next hop information for reaching
                node D has changed i.e. the node D has decided to change the
                paths. In this case, Node A which is the common ancestor node
                for node D along the two paths (previous and new), should generate
                a DCO which traverses downwards in the network.
            </t>

        </section>
        <section title="Transit Information Option changes">
            <t>
                Every RPL message is divided into base message fields and
                additional Options. The base fields apply to the message as a
                whole and options are appended to add message/use-case specific
                attributes. As an example, a DAO message may be attributed by
                one or more "RPL Target" options which specify the
                reachability information for the given targets. Similarly, a
                Transit Information option may be associated with a set of RPL
                Target options.
            </t>

            <t>
                The draft proposes a change in Transit Information option to
                contain "Invalidate previous route" (I) bit. This I-bit signals
                the common ancestor node to generate a DCO on behalf of the
                target node. The I-bit is carried in the transit information
                option which augments the reachability information for a given
                set of RPL Target(s). Transit information option should be
                carried in the DAO message with I-bit set in case route
                invalidation is sought for the correspondig target(s).
            </t>
            <t> <figure align="center" anchor="transit_info_with_i"
                    title="Updated Transit Information Option (New I flag
                    added)"> <artwork align="center"><![CDATA[
0                   1                   2                   3
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   Type = 0x06 | Option Length |E|I|  Flags    | Path Control  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| Path Sequence | Path Lifetime |                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               +
|                                                               |
+                                                               +
|                                                               |
+                        Parent Address*                        +
|                                                               |
+                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                        ]]></artwork> </figure> </t>
            <t>
                I (Invalidate previous route) bit: 1 bit flag. The 'I' flag is
                set by the target node to indicate that it wishes to invalidate
                the previous route by a common ancestor node between the two
                paths.
            </t>
            <t>
                The common ancestor node SHOULD generate a DCO message in
                response to this I-bit when it sees that the routing
                adjacencies have changed for the target. I-bit governs the
                ownership of the DCO message in a way that the target node is
                still in control of its own route invalidation.
            </t>
        </section>
        <section title="Destination Cleanup Object (DCO)">
            <t>
                A new ICMPv6 RPL control message type is defined by this
                specification called as "Destination Cleanup Object" (DCO),
                which is used for proactive cleanup of state and routing
                information held on behalf of the target node by 6LRs. The DCO
                message always traverses downstream and cleans up route
                information and other state information associated with the
                given target.
            </t>

            <t> <figure align="center" anchor="dco_obj"
                    title="DCO base object">
                    <artwork align="center"><![CDATA[
0                   1                   2                   3
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| RPLInstanceID |K|D|   Flags   |   Reserved    | DCOSequence   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                                                               |
+                                                               +
|                                                               |
+                            DODAGID(optional)                  +
|                                                               |
+                                                               +
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   Option(s)...
+-+-+-+-+-+-+-+-+
                        ]]></artwork> </figure> </t>

            <t>
                RPLInstanceID: 8-bit field indicating the topology instance
                associated with the DODAG, as learned from the DIO.
            </t>
            <t>
                K: The 'K' flag indicates that the recipient is expected to send
                a DCO-ACK back. If the DCO-ACK is not received even after
                setting the 'K', an implementation may choose to retry the DCO
                at a later time. The number of retries are implementation and
                deployment dependent. This document recommends using retries
                similar to what will be set for DAO-ACK handling.
            </t>
            <t>
                D: The 'D' flag indicates that the DODAGID field is present.
                This flag MUST be set when a local RPLInstanceID is used.
            </t>
            <t>
                Flags: The 6 bits remaining unused in the Flags field are
                reserved for future use.  These bits MUST be initialized to zero by
                the sender and MUST be ignored by the receiver.
            </t>
            <t>
                Reserved: 8-bit unused field.  The field MUST be initialized to
                zero by the sender and MUST be ignored by the receiver.
            </t>
            <t>
                DCOSequence: Incremented at each unique DCO message from a node
                and echoed in the DCO-ACK message. The initial DCOSequence can
                be chosen randomly by the node.
            </t>
            <t>
                DODAGID (optional): 128-bit unsigned integer set by a DODAG root
                that uniquely identifies a DODAG.  This field is only present
                when the 'D' flag is set.  This field is typically only present
                when a local RPLInstanceID is in use, in order to identify the
                DODAGID that is associated with the RPLInstanceID.  When a
                global RPLInstanceID is in use, this field need not be present.
                Unassigned bits of the DCO Base are reserved.  They MUST be set
                to zero on transmission and MUST be ignored on reception.
            </t>

            <section title="Secure DCO">
                <t>
                    A Secure DCO message follows the format in <xref
                        target="RFC6550"/> figure 7, where the base message
                    format is the DCO message shown in <xref
                        target="dco_obj"/>.
                </t>
            </section>

            <section title="DCO Options">
                <t>
                    The DCO message MAY carry valid options.  This
                    specification allows for the DCO message to carry the
                    following options:
                    <list>
                        <t>0x00 Pad1</t>
                        <t>0x01 PadN</t>
                        <t>0x05 RPL Target</t>
                        <t>0x06 Transit Information</t>
                        <t>0x09 RPL Target Descriptor</t>
                    </list>
                    The DCO carries a Target option and an associated Transit
                    Information option with a lifetime of 0x00000000 to
                    indicate a loss of reachability to that Target.
                </t>
            </section>
            <section title="Path Sequence number in the DCO">
                <t>
                    A DCO message may contain a Path Sequence in the transit
                    information option to identify the freshness of the DCO
                    message. The Path Sequence in the DCO MUST use the same
                    Path Sequence number present in the regular DAO message
                    when the DCO is generated in response to DAO message. The
                    DAO and DCO path sequence are picked from the same sequence
                    number set. Thus if a DCO is received by a 6LR and
                    subsequently a DAO is received with old seqeunce number,
                    then the DAO should be ignored.
                </t>
            </section>

            <section title="Destination Cleanup Option Acknowledgement (DCO-ACK)">
                <t>The DCO-ACK message may be sent as a unicast packet by a DCO
                    recipient in response to a unicast DCO message.</t>
                <t> <figure align="center" anchor="dco_ack" title="DCO-ACK base
                        object"> <artwork align="center"><![CDATA[
0                   1                   2                   3
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| RPLInstanceID |D|  Reserved   |  DCOSequence  |    Status     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                                                               |
+                                                               +
|                                                               |
+                            DODAGID(optional)                  +
|                                                               |
+                                                               +
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                            ]]></artwork> </figure> </t>

                <t>
                    RPLInstanceID: 8-bit field indicating the topology instance
                    associated with the DODAG, as learned from the DIO.
                </t>
                <t>
                    D: The 'D' flag indicates that the DODAGID field is present.
                    This flag MUST be set when a local RPLInstanceID is used.
                </t>
                <t>
                    Reserved: 7-bit unused field.  The field MUST be initialized to
                    zero by the sender and MUST be ignored by the receiver.
                </t>
                <t>
                    DCOSequence: The DCOSequence in DCO-ACK is copied from the
                    DCOSequence received in the DCO message.
                </t>
                <t>
                    Status: Indicates the completion.  Status 0 is defined as
                    unqualified acceptance in this specification.  The remaining
                    status values are reserved as rejection codes.
                </t>
                <t>
                    DODAGID (optional): 128-bit unsigned integer set by a DODAG root
                    that uniquely identifies a DODAG.  This field is only present
                    when the 'D' flag is set.  This field is typically only present
                    when a local RPLInstanceID is in use, in order to identify the
                    DODAGID that is associated with the RPLInstanceID. When a
                    global RPLInstanceID is in use, this field need not be present.
                    Unassigned bits of the DCO-Ack Base are reserved.  They
                    MUST be set to zero on transmission and MUST be ignored on
                    reception.
                </t>
            </section>

            <section title="Secure DCO-ACK">
                <t>
                    A Secure DCO-ACK message follows the format in <xref
                        target="RFC6550"/> figure 7, where the base message
                    format is the DCO-ACK message shown in <xref
                        target="dco_ack"/>.
                </t>
            </section>
        </section>

        <section title="Other considerations">
            <section title="Dependent Nodes invalidation">
                <t>
                    Current RPL <xref target="RFC6550"/> does not provide a
                    mechanism for route invalidation for dependent nodes. This
                    document allows the dependent nodes invalidation. Dependent
                    nodes will generate their respective DAOs to update their
                    paths, and the previous route invalidation for those nodes
                    should work in the similar manner described for switching
                    node. The dependent node may set the I-bit in the transit
                    information option as part of regular DAO so as to
                    request invalidation of previous route from the common
                    ancestor node.
                </t>
            </section>
            <section title="NPDAO and DCO in the same network">
                <t>
                    Even with the changed semantics, the current NPDAO
                    mechanism in <xref target="RFC6550"/> can still be used,
                    for example, when the route lifetime expiry of the target
                    happens or when the node simply decides to gracefully
                    terminate the RPL session on graceful node shutdown.
                    Moreover a deployment can have a mix of nodes
                    supporting the proposed DCO and the existing NPDAO
                    mechanism.
                </t>
            </section>
            <section title="DCO with multiple preferred parents">
                <t>
                    <xref target="RFC6550"/> allows a node to select multiple
                    preferred parents for route establishment.  Section 9.2.1
                    of <xref target="RFC6550"/> specifies, "All DAOs generated
                    at the same time for the same Target MUST be sent with the
                    same Path Sequence in the Transit Information". Thus a DAO
                    message with the same path sequence MUST be sent to all the
                    parents. Subsequently when route invalidation has to be
                    initiated, RPL mentions that an NPDAO must be initiated
                    with updated path sequence to all the routes to be
                    invalidated.
                </t>
                <t>
                    With DCO, the Target node itself does not initiate the
                    route invalidation and it is left to the common ancestor
                    node. A common ancestor node when it discovers an updated
                    DAO from a new next-hop, it initiates a DCO. With multiple
                    preferred parents, this handling does not change. But in
                    this case it is recommended that an implementation initiates a
                    DCO after a time period such that the common ancestor node
                    may receive updated DAOs from all possible next-hops. This
                    will help to reduce DCO control overhead i.e., the common
                    ancestor can wait for updated DAOs from all possible
                    directions before initiating a DCO for route invalidation.
                    The time period for initiating a DCO could be based on the
                    depth of the network. After timeout, the DCO needs to be
                    generated for all the next-hops for whom the route
                    invalidation needs to be done.
                </t>
            </section>
        </section>
    </section>

    <section anchor="Acknowledgements" title="Acknowledgements">
        <t>
            Many thanks to Cenk Gundogan, Simon Duquennoy, Georgios
            Papadopoulous, Peter Van Der Stok for their review and comments.
        </t>
    </section>

    <!-- Possibly a 'Contributors' section ... -->

    <section anchor="IANA" title="IANA Considerations">
        <t>IANA is requested to allocate new ICMPv6 RPL control codes in RPL
            <xref target="RFC6550"/> for DCO and DCO-ACK messages.</t>
        <texttable title="">
            <ttcol align='center'>Code</ttcol>
            <ttcol align='center'>Description</ttcol>
            <ttcol align='center'>Reference</ttcol>

            <c>0x04</c>
            <c>Destination Cleanup Object</c>
            <c>This document</c>
            <c>0x05</c>
            <c>Destination Cleanup Object Acknowledgement</c>
            <c>This document</c>
            <c>0x84</c>
            <c>Secure Destination Cleanup Object</c>
            <c>This document</c>
            <c>0x85</c>
            <c>Secure Destination Cleanup Object Acknowledgement</c>
            <c>This document</c>
        </texttable>

        <t>IANA is requested to allocate bit 18 in the Transit Information
            Option defined in RPL <xref target="RFC6550"/> section 6.7.8 for
            Invalidate route 'I' flag.</t>
    </section>

    <section anchor="Security" title="Security Considerations">
        <t>
            All RPL messages support a secure version of messages which allows
            integrity protection using either a MAC or a signature. Optionally,
            secured RPL messages also have encryption protection for
            confidentiality.
        </t>
        <t>
            The document adds new messages (DCO, DCO-ACK) which are
            syntactically similar to existing RPL messages such as DAO,
            DAO-ACK.  Secure versions of DCO and DCO-ACK are added similar to
            other RPL messages (such as DAO, DAO-ACK).
        </t>
        <t>
            RPL supports three security modes as mentioned in Section 10.1 of
            <xref target="RFC6550"/>:
            <list style="numbers">
                <t>
                    Unsecured: In this mode, it is expected that the RPL control messages
                    are secured by other security mechanisms, such as
                    link-layer security. In this mode, the RPL control messages,
                    including DCO, DCO-ACK, do not have Security sections.
                </t>
                <t>
                    Preinstalled: In this mode, RPL uses secure messages. Thus
                    secure versions of DCO, DCO-ACK MUST be used in this mode.
                </t>
                <t>
                    Authenticated: In this mode, RPL uses secure messages. Thus
                    secure versions of DCO, DCO-ACK MUST be used in this mode.
                </t>
            </list>
        </t>
    </section>
</middle>

<back>
    <!-- References split into informative and normative -->

    <!-- There are 2 ways to insert reference entries from the citation libraries:
     1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
     2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
        (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

     Both are cited textually in the same manner: by using xref elements.
     If you use the PI option, xml2rfc will, by default, try to find included files in the same
     directory as the including file. You can also define the XML_LIBRARY environment variable
     with a value containing a set of directories to search.  These can be either in the local
     filing system or remote ones accessed by http (http://domain/dir/... ).-->

    <references title="Normative References">
        <!--?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"?-->
        &RFC6550;
        &RFC2119;
    </references>

    <!--
    <references title="Informative References">
        <?rfc include="reference.I-D.ietf-6tisch-architecture.xml"?>
    </references>
    -->

    <section anchor="app-additional" title="Example Messaging">
        <section title="Example DCO Messaging">
        <t>
            In <xref target="sample_top"/>, node (D) switches its parent from
            (B) to (C). The sequence of actions is as follows:
            <list style="numbers">
                <t>Node D switches its parent from node B to node C</t>

                <t>D sends a regular DAO(tgt=D,pathseq=x+1,I_flag=1) in the
                    updated path to C</t>

                <t>C checks for routing entry on behalf of D, since it cannot
                    find an entry on behalf of D it creates a new routing entry
                    and forwards the reachability information of the target D
                    to H in a DAO.</t>

                <t>Similar to C, node H checks for routing entry on behalf of
                    D, cannot find an entry and hence creates a new routing
                    entry and forwards the reachability information of the
                    target D to H in a DAO.</t>

                <t>Node A receives the DAO, and checks for routing entry on
                    behalf of D. It finds a routing entry but checks that the
                    next hop for target D is now changed. Node A checks the
                    I_flag and generates DCO(tgt=D,pathseq=pathseq(DAO)) to
                    previous next hop for target D which is G. Subsequently, A
                    updates the routing entry and forwards the reachability
                    information of target D upstream
                    DAO(tgt=D,pathseq=x+1,I_flag=x) (the I_flag carries no
                    significance henceforth).</t>

                <t>Node G receives the DCO and invalidates routing entry of
                    target D and forwards the (un)reachability information
                    downstream to B.</t>

                <t>Similarly, B processes the DCO by invalidating the routing
                    entry of target D and forwards the (un)reachability
                    information downstream to D.</t>

                <t>D ignores the DCO since the target is itself.</t>

                <t>The propagation of the DCO will stop at any node where the
                    node does not have an routing information associated with
                    the target. If the routing information is present and the
                    pathseq associated is not older, then still the DCO is
                    dropped.</t>

        </list></t>
        </section>
        <section title="Example DCO Messaging with multiple preferred parents">
            <t> <figure align="center" anchor="sample_top_mpp" title="Sample
                    topology 2"> <artwork align="center"><![CDATA[
        (6LBR)
          |
          |
          |
        (N11)
         / \
        /   \
       /     \
    (N21)   (N22)
      /      / \
     /      /   \
    /      /     \
 (N31)  (N32)  (N33)
     :    |    /
      :   |   /
       :  |  /
        (N41)
                        ]]></artwork> </figure> </t>
            <t>
                In <xref target="sample_top_mpp"/>, node (N41) selects multiple
                preferred parents (N32) and (N33).
                The sequence of actions is as follows:
                <list style="numbers">
                    <t>
                        (N41) sends DAO(tgt=N41,PS=x,I_flag=1) to (N32) and (N33).
                        Here I_flag refers to the Invalidation flag and PS refers to
                        Path Sequence in Transit Information option.
                    </t>

                    <t>
                        (N32) sends DAO(tgt=N41,PS=x,I_flag=1) to (N22). (N33) also
                        sends DAO(tgt=N41,PS=x,I_flag=1) to (N22). (N22) learns
                        multiple routes for the same destination (N41) through
                        multiple next-hops. The route table at N22 should
                        contain (Dst,NextHop,PS): { (N41,N32,x), (N41,N33,x) }.
                    </t>

                    <t>
                        (N22) sends DAO(tgt=N41,PS=x,I_flag=1) to (N11).
                    </t>

                    <t>
                        (N11) sends DAO(tgt=N41,PS=x,I_flag=1) to (6LBR). Thus the
                        complete path is established.
                    </t>

                    <t>
                        (N41) decides to change preferred parent set from {
                        N32, N33 } to { N31, N32 }.
                    </t>

                    <t>
                        (N41) sends DAO(tgt=N41,PS=x+1,I_flag=1) to (N32). (N41)
                        sends DAO(tgt=N41,PS=x+1,I_flag=1) to (N31).
                    </t>

                    <t>
                        (N32) sends DAO(tgt=N41,PS=x+1,I_flag=1) to (N22). (N22) has
                        multiple routes to destination (N41). It sees that a
                        new path sequence for Target=N41 is received and thus
                        it waits for pre-determined time period to invalidate
                        another route {(N41),(N33),x}. After time period, (N22)
                        sends DCO(tgt=N41,PS=x+1) to (N33).
                    </t>

            </list></t>
        </section>
    </section>

</back>
</rfc>

